<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2024.1.5">
  <Settings>
    <Param val="3" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="comma" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s/sub-%s/ses-%s/beh/sub-%s_ses-%s_%s' % (expInfo['Protocol ID'], expInfo['Subject ID'], expInfo['Session ID'], expInfo['Subject ID'], expInfo['Session ID'], timestamp)" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="" valType="str" updates="None" name="End Message"/>
    <Param val="{'Protocol ID': 'devJG', 'Subject ID': '01', 'Session ID': '01', 'Wait for Trigger': '$False'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="wfieldMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="True" valType="bool" updates="None" name="Save csv file"/>
    <Param val="True" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="False" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1080]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="float" valType="str" updates="None" name="clockFormat"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="Gratings_vis_devJG_v0.6" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="" valType="code" updates="None" name="frameRate"/>
    <Param val="Attempting to measure frame rate of screen, please wait..." valType="str" updates="None" name="frameRateMsg"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="warning" valType="code" updates="None" name="logging level"/>
    <Param val="True" valType="bool" updates="None" name="measureFrameRate"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="0" valType="code" updates="None" name="runMode"/>
    <Param val="True" valType="bool" updates="None" name="rush"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="display_gratings">
      <RoutineSettingsComponent name="display_gratings" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="display_gratings" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="generate_grating_angles" plugin="None">
        <Param val="import random&amp;#10;&amp;#10;&amp;#10;grating_angles_array = [0, 45, 90, 135, 180, 225, 270, 315]&amp;#10;" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="import * as random from 'random';&amp;#10;grating_angles_array = [0, 45, 90, 135, 180, 225, 270, 315];&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="grating_index = 0" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="grating_index = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="console.log(&quot;!!!!! Start of routine angle index:&quot;, grating_index);&amp;#10;grating_angle = grating_angles_array[grating_index];&amp;#10;console.log(&quot;Displaying angle:&quot;, grating_angle, &quot; with index: &quot;, grating_index);&amp;#10;grating_index += 1;&amp;#10;console.log(&quot;grating_index += 1:&quot;, grating_index);&amp;#10;if ((grating_index === grating_angles_array.length)) {&amp;#10;    console.log(grating_index, &quot; is &gt;= &quot;, grating_angles_array.length);&amp;#10;    grating_index = 0;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#grating_angle = random.choice(grating_angles_array)&amp;#10;&amp;#10;print(&quot;!!!!! Start of routine angle index:&quot;, grating_index)&amp;#10;&amp;#10;    #print(&quot;2. else:&quot;, grating_index)&amp;#10;grating_angle = grating_angles_array[grating_index]&amp;#10;print(&quot;Displaying angle:&quot;, grating_angle, &quot; with index: &quot;, grating_index)&amp;#10;grating_index += 1&amp;#10;print(&quot;grating_index += 1:&quot;, grating_index)&amp;#10;    &amp;#10;if grating_index == len(grating_angles_array):&amp;#10;    print(grating_index, &quot; is &gt;= &quot;, len(grating_angles_array))&amp;#10;    grating_index = 0&amp;#10;    #print(&quot;if statement: index reset&quot;)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="generate_grating_angles" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="stim_grayScreen" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="0.0000, 0.0000, 0.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="3" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="stim_grayScreen" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1, 1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="frame N" valType="str" updates="None" name="stopType"/>
        <Param val="300" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <GratingComponent name="stim_grating" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="avg" valType="str" updates="constant" name="blendmode"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1.0" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="2" valType="code" updates="None" name="durationEstim"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="file" updates="constant" name="mask"/>
        <Param val="stim_grating" valType="code" updates="None" name="name"/>
        <Param val="2" valType="num" updates="constant" name="opacity"/>
        <Param val="grating_angle" valType="num" updates="set every repeat" name="ori"/>
        <Param val="t" valType="num" updates="set every frame" name="phase"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="8" valType="num" updates="constant" name="sf"/>
        <Param val="(2, 2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="3.0" valType="code" updates="None" name="startVal"/>
        <Param val="frame N" valType="str" updates="None" name="stopType"/>
        <Param val="300" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="sin" valType="file" updates="constant" name="tex"/>
        <Param val="256" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </GratingComponent>
      <CodeComponent name="code_nidaq_sync_pulse_2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="import nidaqmx&amp;#10;import time&amp;#10;from nidaqmx.constants import LineGrouping&amp;#10;&amp;#10;class SyncPulseTask:&amp;#10;    def __init__(self, device, line):&amp;#10;        self.device = device&amp;#10;        self.line = line&amp;#10;        self.sync_times = []&amp;#10;        self.task = nidaqmx.Task()&amp;#10;        self.task.di_channels.add_di_chan(f&quot;{self.device}/{self.line}&quot;, line_grouping=LineGrouping.CHAN_PER_LINE)&amp;#10;&amp;#10;    def read_pulse(self):&amp;#10;        data = self.task.read(number_of_samples_per_channel=1, timeout=10.0)&amp;#10;        if data[0]:&amp;#10;            pulse_time = time.time()&amp;#10;            self.sync_times.append(pulse_time)&amp;#10;            print(f&quot;Sync pulse received at {pulse_time}&quot;)&amp;#10;&amp;#10;    def start(self):&amp;#10;        self.task.start()&amp;#10;&amp;#10;    def stop(self):&amp;#10;        self.task.stop()&amp;#10;        self.task.close()&amp;#10;&amp;#10;sync_task = SyncPulseTask(&quot;Dev1&quot;, &quot;port2/line0&quot;)&amp;#10;sync_task.start()" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import * as nidaqmx from 'nidaqmx';&amp;#10;import * as time from 'time';&amp;#10;import {LineGrouping} from 'nidaqmx/constants';&amp;#10;class SyncPulseTask {&amp;#10;    constructor(device, line) {&amp;#10;        this.device = device;&amp;#10;        this.line = line;&amp;#10;        this.sync_times = [];&amp;#10;        this.task = new nidaqmx.Task();&amp;#10;        this.task.di_channels.add_di_chan(`${this.device}/${this.line}`, {&quot;line_grouping&quot;: LineGrouping.CHAN_PER_LINE});&amp;#10;    }&amp;#10;    read_pulse() {&amp;#10;        var data, pulse_time;&amp;#10;        data = this.task.read({&quot;number_of_samples_per_channel&quot;: 1, &quot;timeout&quot;: 10.0});&amp;#10;        if (data[0]) {&amp;#10;            pulse_time = time.time();&amp;#10;            this.sync_times.push(pulse_time);&amp;#10;            console.log(`Sync pulse received at ${pulse_time}`);&amp;#10;        }&amp;#10;    }&amp;#10;    start() {&amp;#10;        this.task.start();&amp;#10;    }&amp;#10;    stop() {&amp;#10;        this.task.stop();&amp;#10;        this.task.close();&amp;#10;    }&amp;#10;}&amp;#10;sync_task = new SyncPulseTask(&quot;Dev1&quot;, &quot;port2/line0&quot;);&amp;#10;sync_task.start();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="# Check for sync pulse each frame&amp;#10;sync_task.read_pulse()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="sync_task.read_pulse();&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="# Stop the sync task&amp;#10;sync_task.stop()&amp;#10;&amp;#10;#save&amp;#10;thisExp.addData('sync_times', sync_task.sync_times)" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="sync_task.stop();&amp;#10;psychoJS.experiment.addData(&quot;sync_times&quot;, sync_task.sync_times);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="code_nidaq_sync_pulse_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="read_encoder" plugin="None">
        <Param val="&quot;&quot;&quot;jgronemeyer 2024 custom code block&quot;&quot;&quot;&amp;#10;import serial&amp;#10;import time&amp;#10;from datetime import datetime # for BIDS saving&amp;#10;import pandas as pd&amp;#10;import os&amp;#10;import threading&amp;#10;&amp;#10;# For BIDS file saving&amp;#10;timestamp = datetime.now().strftime('%Y%m%d_%H%M%S') # get current timestamp (BIDS)&amp;#10;&amp;#10;# Constants&amp;#10;WHEEL_DIAMETER = 0.1  # in meters, example value&amp;#10;ENCODER_CPR = 1200    # encoder counts per revolution&amp;#10;SAMPLE_WINDOW = 0.05  # sample window in seconds, matching the Arduino sample window&amp;#10;SAVE_DIR = r'C:/dev/devOutput/encoder'  # Directory to save data&amp;#10;PORT = 'COM3'&amp;#10;&amp;#10;# Set up the serial port connection to arduino&amp;#10;arduino = serial.Serial(port=PORT, baudrate=57600, timeout=1)&amp;#10;&amp;#10;# Initialize DataFrame to store encoder data&amp;#10;columns = ['timestamp', 'speed', 'distance', 'direction']&amp;#10;encoder_data = pd.DataFrame(columns=columns)&amp;#10;&amp;#10;# Shared variable for clicks (raw value received from encoder)&amp;#10;clicks_lock = threading.Lock() #thread locked for synchronization&amp;#10;shared_clicks = 0 #cross-thread accessible variable&amp;#10;&amp;#10;def read_encoder():&amp;#10;    global shared_clicks&amp;#10;    while True:&amp;#10;        try:&amp;#10;            data = arduino.readline().decode('utf-8').strip()&amp;#10;            if data:&amp;#10;                with clicks_lock:&amp;#10;                    shared_clicks = int(data)&amp;#10;        except ValueError:&amp;#10;            pass&amp;#10;&amp;#10;#NOTE: time_interval value should use PsychoPy's core.Clock() &amp;#10;def calculate_metrics(clicks, time_interval):&amp;#10;    rotations = clicks / ENCODER_CPR&amp;#10;    distance = rotations * (3.1416 * WHEEL_DIAMETER)&amp;#10;    speed = distance / time_interval  # m/s&amp;#10;    return speed, distance&amp;#10;&amp;#10;def determine_direction(clicks):&amp;#10;    if clicks == 0:&amp;#10;        return 0  # Stationary&amp;#10;    elif clicks &gt; 0:&amp;#10;        return 1  # Forward&amp;#10;    else:&amp;#10;        return 2  # Backward&amp;#10;&amp;#10;def save_data(timestamp, speed, distance, direction):&amp;#10;    global encoder_data&amp;#10;    new_data = pd.DataFrame([[timestamp, speed, distance, direction]], columns=encoder_data.columns)&amp;#10;    encoder_data = pd.concat([encoder_data, new_data], ignore_index=True)" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="&quot;&quot;&quot;jgronemeyer 2024 custom code block&quot;&quot;&quot;&amp;#10;total_distance = 0&amp;#10;&amp;#10;# Start the encoder reading thread&amp;#10;encoder_thread = threading.Thread(target=read_encoder, daemon=True)&amp;#10;encoder_thread.start()" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="/* jgronemeyer 2024 custom code block */&amp;#10;total_distance = 0;&amp;#10;encoder_thread = new threading.Thread({&quot;target&quot;: read_encoder, &quot;daemon&quot;: true});&amp;#10;encoder_thread.start();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="prev_time = core.getTime();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# This value provides the encoder thread with &amp;#10;#   the timestamp for the start of each Routine&amp;#10;prev_time = core.getTime()&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="&quot;&quot;&quot;jgronemeyer 2024 custom code block&quot;&quot;&quot;&amp;#10;&amp;#10;current_time = core.getTime()&amp;#10;time_interval = current_time - prev_time&amp;#10;#Time must have passed to collect encoder clicks&amp;#10;if time_interval &gt;= SAMPLE_WINDOW:&amp;#10;    with clicks_lock:&amp;#10;        clicks = shared_clicks&amp;#10;&amp;#10;    speed, distance = calculate_metrics(clicks, time_interval)&amp;#10;    total_distance += distance&amp;#10;    direction = determine_direction(clicks)&amp;#10;&amp;#10;    timestamp = current_time&amp;#10;    save_data(timestamp, speed, total_distance, direction)&amp;#10;    &amp;#10;    #comment out/in for debugging&amp;#10;    print(f&quot;Time: {timestamp:.2f}s, Speed: {speed:.2f} m/s, Total Distance: {total_distance:.2f} m, Direction: {direction}&quot;)&amp;#10;&amp;#10;    prev_time = current_time" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="#Export encoder_data to .csv file&amp;#10;save_to = u'data/%s/sub-%s/ses-%s/beh' % (expInfo['Protocol ID'], expInfo['Subject ID'], expInfo['Session ID'])&amp;#10;new_dir = os.path.join(_thisDir, save_to)&amp;#10;&amp;#10;# Create the path if it does not exist&amp;#10;if not os.path.exists(new_dir):&amp;#10;    os.makedirs(new_dir)&amp;#10;&amp;#10;# Sipelab standard BIDS protocol file naming for &amp;#10;#   future batch analysis and data wrangling&amp;#10;protocol_id = expInfo['Protocol ID']&amp;#10;subject_id = expInfo['Subject ID']&amp;#10;session_id = expInfo['Session ID']&amp;#10;timestamp = datetime.now().strftime('%Y%m%d_%H%M%S') # get current timestamp (BIDS)&amp;#10;&amp;#10;filename = os.path.join(new_dir, f&quot;sub-{subject_id}_ses-{session_id}_{timestamp}_wheeldf.csv&quot;)&amp;#10;&amp;#10;encoder_data.to_csv(filename, index=False)&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="#save the dataframe trial by trial&amp;#10;#thisExp.addData('encoder_data', encoder_data)&amp;#10;&amp;#10;#TODO: instantiate new dataframe at beginning of each&amp;#10;#routine. Currently, this just incrementally appends&amp;#10;#resulting in duplicate data. &amp;#10;&amp;#10;#For now, data is exported separately on End Experiment&amp;#10;#in a .csv" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="read_encoder" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="nidaqTrigger">
      <RoutineSettingsComponent name="nidaqTrigger" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="nidaqTrigger" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text_waiting_message" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_waiting_message" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Waiting for NIDAQ trigger to begin visual stim..." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="nidaq_parameters" plugin="None">
        <Param val="import nidaqmx&amp;#10;&amp;#10;NIDAQ_DEVICE = 'Dev1'&amp;#10;CHANNELS = ['port2/line0']" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="import * as nidaqmx from 'nidaqmx';&amp;#10;NIDAQ_DEVICE = &quot;Dev1&quot;;&amp;#10;CHANNELS = [&quot;port2/line0&quot;];&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="nidaq_parameters" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_nidaq_trigger" plugin="None">
        <Param val="class NIDAQ:&amp;#10;    '''&amp;#10;    Class to handle NI-DAQ operations for digital output. The class is used as a context manager to ensure proper initialization and cleanup of the NI-DAQ task. &amp;#10;    The send_signal method is used to send a digital signal to the specified channels&amp;#10;    The trigger method is a convenience method to send a high signal followed by a low signal to the channels.&amp;#10;    &amp;#10;    Parameters:&amp;#10;    - device_name (str): Name of the NI-DAQ device (default: 'Dev2')&amp;#10;    - channels (list): List of channel names to use for digital output (default: ['port0/line0', 'port0/line1'])&amp;#10;    '''&amp;#10;    def __init__(self, device_name=NIDAQ_DEVICE, channels=CHANNELS):&amp;#10;        self.device_name = device_name&amp;#10;        self.channels = channels if channels else ['port0/line0', 'port0/line1']&amp;#10;        self.task = None&amp;#10;&amp;#10;    def __enter__(self):&amp;#10;        self.task = nidaqmx.Task()&amp;#10;        for channel in self.channels:&amp;#10;            full_channel_name = f'{self.device_name}/{channel}'&amp;#10;            self.task.do_channels.add_do_chan(full_channel_name)&amp;#10;        return self&amp;#10;&amp;#10;    def __exit__(self, exc_type, exc_val, exc_tb):&amp;#10;        if self.task:&amp;#10;            self.task.close()&amp;#10;&amp;#10;    def send_signal(self, signal_values):&amp;#10;        if not self.task:&amp;#10;            raise RuntimeError(&quot;Task not initialized. Use 'with NIDAQ(...) as nidaq:' context.&quot;)&amp;#10;        self.task.write(signal_values)&amp;#10;        print(f&quot;Signal {'High' if all(signal_values) else 'Low'} on {self.device_name} for channels {self.channels}&quot;)&amp;#10;&amp;#10;    def trigger(self, state):&amp;#10;        signal_values = [state] * len(self.channels)&amp;#10;        self.send_signal(signal_values)&amp;#10;        &amp;#10;    def pulse(self, duration=1):&amp;#10;        self.trigger(True)&amp;#10;        time.sleep(duration)&amp;#10;        self.trigger(False)&amp;#10;" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="class NIDAQ {&amp;#10;    /*&amp;#10;    Class to handle NI-DAQ operations for digital output. The class is used as a context manager to ensure proper initialization and cleanup of the NI-DAQ task.&amp;#10;    The send_signal method is used to send a digital signal to the specified channels&amp;#10;    The trigger method is a convenience method to send a high signal followed by a low signal to the channels.&amp;#10;&amp;#10;    Parameters:&amp;#10;    - device_name (str): Name of the NI-DAQ device (default: 'Dev2')&amp;#10;    - channels (list): List of channel names to use for digital output (default: ['port0/line0', 'port0/line1'])&amp;#10;    */&amp;#10;    constructor(device_name = NIDAQ_DEVICE, channels = CHANNELS) {&amp;#10;        this.device_name = device_name;&amp;#10;        this.channels = (channels ? channels : [&quot;port0/line0&quot;, &quot;port0/line1&quot;]);&amp;#10;        this.task = null;&amp;#10;    }&amp;#10;    __enter__() {&amp;#10;        var full_channel_name;&amp;#10;        this.task = new nidaqmx.Task();&amp;#10;        for (var channel, _pj_c = 0, _pj_a = this.channels, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;            channel = _pj_a[_pj_c];&amp;#10;            full_channel_name = `${this.device_name}/${channel}`;&amp;#10;            this.task.do_channels.add_do_chan(full_channel_name);&amp;#10;        }&amp;#10;        return this;&amp;#10;    }&amp;#10;    __exit__(exc_type, exc_val, exc_tb) {&amp;#10;        if (this.task) {&amp;#10;            this.task.close();&amp;#10;        }&amp;#10;    }&amp;#10;    send_signal(signal_values) {&amp;#10;        if ((! this.task)) {&amp;#10;            throw new RuntimeError(&quot;Task not initialized. Use 'with NIDAQ(...) as nidaq:' context.&quot;);&amp;#10;        }&amp;#10;        this.task.write(signal_values);&amp;#10;        console.log(`Signal ${(all(signal_values) ? &quot;High&quot; : &quot;Low&quot;)} on ${this.device_name} for channels ${this.channels}`);&amp;#10;    }&amp;#10;    trigger(state) {&amp;#10;        var signal_values;&amp;#10;        signal_values = ([state] * this.channels.length);&amp;#10;        this.send_signal(signal_values);&amp;#10;    }&amp;#10;    pulse(duration = 1) {&amp;#10;        this.trigger(true);&amp;#10;        time.sleep(duration);&amp;#10;        this.trigger(false);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="wait_for_trigger = False" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="wait_for_trigger = false;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if wait_for_trigger:&amp;#10;    with NIDAQ() as nidaq:&amp;#10;        print(&quot;Waiting for trigger...&quot;)&amp;#10;        nidaq.trigger(False)&amp;#10;        while not nidaq.task.read():&amp;#10;            time.sleep(0.1)&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="## Check the condition each frame&amp;#10;#with nidaqmx.Task() as nidaq: &amp;#10;#    # Configure the task to listen for a digital input signal on a specific port and line&amp;#10;#    nidaq.di_channels.add_di_chan(&quot;Dev1/port2/line0&quot;)&amp;#10;#    print(&quot;Waiting for trigger signal...&quot;)&amp;#10;#    &amp;#10;#    nidaq_trigger = nidaq.read()&amp;#10;#    &amp;#10;#    if nidaq_trigger:&amp;#10;#        continueRoutine = False  # Ends the routine if the condition is met&amp;#10;#" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="with NIDAQ() as nidaq:&amp;#10;    nidaq.trigger(False)" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="print(&quot;Starting immediately...&quot;)&amp;#10;with NIDAQ() as nidaq:&amp;#10;    nidaq.trigger(True)&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_nidaq_trigger" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="nidaqSynch">
      <RoutineSettingsComponent name="nidaqSynch" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="nidaqSynch" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_nidaq_sync_pulse" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="from nidaqmx import Task&amp;#10;import numpy as np&amp;#10;import time&amp;#10;&amp;#10;class SyncPulseTask(Task):&amp;#10;    def __init__(self):&amp;#10;        Task.__init__(self)&amp;#10;        self.CreateDIChan(&quot;/Dev1/port0/line0&quot;, &quot;&quot;, PyDAQmx.DAQmx_Val_ChanForAllLines)&amp;#10;        self.AutoRegisterEveryNSamplesEvent()&amp;#10;        self.sync_times = []&amp;#10;&amp;#10;    def EveryNCallback(self):&amp;#10;        pulse_time = time.time()&amp;#10;        self.sync_times.append(pulse_time)&amp;#10;        print(f&quot;Sync pulse received at {pulse_time}&quot;)&amp;#10;        return 0  # The function should return an integer&amp;#10;    &amp;#10;    def Start(self):&amp;#10;        self.StartTask()&amp;#10;&amp;#10;sync_task = SyncPulseTask()&amp;#10;sync_task.Start()" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import {Task} from 'nidaqmx';&amp;#10;import * as np from 'numpy';&amp;#10;import * as time from 'time';&amp;#10;class SyncPulseTask extends Task {&amp;#10;    constructor() {&amp;#10;        Task.__init__(this);&amp;#10;        new this.CreateDIChan(&quot;/Dev1/port0/line0&quot;, &quot;&quot;, PyDAQmx.DAQmx_Val_ChanForAllLines);&amp;#10;        new this.AutoRegisterEveryNSamplesEvent();&amp;#10;        this.sync_times = [];&amp;#10;    }&amp;#10;    EveryNCallback() {&amp;#10;        var pulse_time;&amp;#10;        pulse_time = time.time();&amp;#10;        this.sync_times.push(pulse_time);&amp;#10;        console.log(`Sync pulse received at ${pulse_time}`);&amp;#10;        return 0;&amp;#10;    }&amp;#10;    Start() {&amp;#10;        new this.StartTask();&amp;#10;    }&amp;#10;}&amp;#10;sync_task = new SyncPulseTask();&amp;#10;new sync_task.Start();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="# Check for new sync pulses and update the experiment data if needed&amp;#10;if len(sync_task.sync_times) &gt; 0:&amp;#10;    last_sync_time = sync_task.sync_times[-1]&amp;#10;    print(f&quot;Last sync pulse time: {last_sync_time}&quot;)" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if ((sync_task.sync_times.length &gt; 0)) {&amp;#10;    last_sync_time = sync_task.sync_times.slice((- 1))[0];&amp;#10;    console.log(`Last sync pulse time: ${last_sync_time}`);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="thisExp.addData('sync_times', sync_task.sync_times)" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="psychoJS.experiment.addData(&quot;sync_times&quot;, sync_task.sync_times);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_nidaq_sync_pulse" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="nidaqTrigger"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="120" valType="num"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="display_gratings"/>
    <LoopTerminator name="trials"/>
  </Flow>
</PsychoPy2experiment>

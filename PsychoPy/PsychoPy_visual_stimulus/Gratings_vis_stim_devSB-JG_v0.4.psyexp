<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2024.1.5">
  <Settings>
    <Param val="3" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="comma" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['Subject ID'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="" valType="str" updates="None" name="End Message"/>
    <Param val="{'Protocol ID': 'devJG', 'Subject ID': '01', 'Session ID': '01'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="wfieldMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="True" valType="bool" updates="None" name="Save csv file"/>
    <Param val="True" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="2" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1080]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="float" valType="str" updates="None" name="clockFormat"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="Gratings_vis_devJG_v0.4" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="" valType="code" updates="None" name="frameRate"/>
    <Param val="Attempting to measure frame rate of screen, please wait..." valType="str" updates="None" name="frameRateMsg"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="warning" valType="code" updates="None" name="logging level"/>
    <Param val="True" valType="bool" updates="None" name="measureFrameRate"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="0" valType="code" updates="None" name="runMode"/>
    <Param val="False" valType="bool" updates="None" name="rush"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="display_gratings">
      <RoutineSettingsComponent name="display_gratings" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="display_gratings" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_generate_grating_angles" plugin="None">
        <Param val="import random&amp;#10;&amp;#10;&amp;#10;grating_angles_array = [0, 45, 90, 135, 180, 225, 270, 315]&amp;#10;" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="import * as random from 'random';&amp;#10;grating_angles_array = [0, 45, 90, 135, 180, 225, 270, 315];&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="grating_index = 0" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="grating_index = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="console.log(&quot;!!!!! Start of routine angle index:&quot;, grating_index);&amp;#10;grating_angle = grating_angles_array[grating_index];&amp;#10;console.log(&quot;Displaying angle:&quot;, grating_angle, &quot; with index: &quot;, grating_index);&amp;#10;grating_index += 1;&amp;#10;console.log(&quot;grating_index += 1:&quot;, grating_index);&amp;#10;if ((grating_index === grating_angles_array.length)) {&amp;#10;    console.log(grating_index, &quot; is &gt;= &quot;, grating_angles_array.length);&amp;#10;    grating_index = 0;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#grating_angle = random.choice(grating_angles_array)&amp;#10;&amp;#10;print(&quot;!!!!! Start of routine angle index:&quot;, grating_index)&amp;#10;&amp;#10;    #print(&quot;2. else:&quot;, grating_index)&amp;#10;grating_angle = grating_angles_array[grating_index]&amp;#10;print(&quot;Displaying angle:&quot;, grating_angle, &quot; with index: &quot;, grating_index)&amp;#10;grating_index += 1&amp;#10;print(&quot;grating_index += 1:&quot;, grating_index)&amp;#10;    &amp;#10;if grating_index == len(grating_angles_array):&amp;#10;    print(grating_index, &quot; is &gt;= &quot;, len(grating_angles_array))&amp;#10;    grating_index = 0&amp;#10;    #print(&quot;if statement: index reset&quot;)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_generate_grating_angles" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="stim_grayScreen" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="0.0000, 0.0000, 0.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="3" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="stim_grayScreen" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1, 1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="frame N" valType="str" updates="None" name="stopType"/>
        <Param val="300" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <GratingComponent name="stim_grating" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="avg" valType="str" updates="constant" name="blendmode"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1.0" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="2" valType="code" updates="None" name="durationEstim"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="file" updates="constant" name="mask"/>
        <Param val="stim_grating" valType="code" updates="None" name="name"/>
        <Param val="2" valType="num" updates="constant" name="opacity"/>
        <Param val="grating_angle" valType="num" updates="set every repeat" name="ori"/>
        <Param val="t" valType="num" updates="set every frame" name="phase"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="4" valType="num" updates="constant" name="sf"/>
        <Param val="(2, 2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="3.0" valType="code" updates="None" name="startVal"/>
        <Param val="frame N" valType="str" updates="None" name="stopType"/>
        <Param val="300" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="sin" valType="file" updates="constant" name="tex"/>
        <Param val="256" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </GratingComponent>
      <CodeComponent name="code_nidaq_sync_pulse_2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="import nidaqmx&amp;#10;import time&amp;#10;from nidaqmx.constants import LineGrouping&amp;#10;&amp;#10;class SyncPulseTask:&amp;#10;    def __init__(self, device, line):&amp;#10;        self.device = device&amp;#10;        self.line = line&amp;#10;        self.sync_times = []&amp;#10;        self.task = nidaqmx.Task()&amp;#10;        self.task.di_channels.add_di_chan(f&quot;{self.device}/{self.line}&quot;, line_grouping=LineGrouping.CHAN_PER_LINE)&amp;#10;&amp;#10;    def read_pulse(self):&amp;#10;        data = self.task.read(number_of_samples_per_channel=1, timeout=10.0)&amp;#10;        if data[0]:&amp;#10;            pulse_time = time.time()&amp;#10;            self.sync_times.append(pulse_time)&amp;#10;            print(f&quot;Sync pulse received at {pulse_time}&quot;)&amp;#10;&amp;#10;    def start(self):&amp;#10;        self.task.start()&amp;#10;&amp;#10;    def stop(self):&amp;#10;        self.task.stop()&amp;#10;        self.task.close()&amp;#10;&amp;#10;sync_task = SyncPulseTask(&quot;Dev1&quot;, &quot;port2/line0&quot;)&amp;#10;sync_task.start()" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import * as nidaqmx from 'nidaqmx';&amp;#10;import * as time from 'time';&amp;#10;import {LineGrouping} from 'nidaqmx/constants';&amp;#10;class SyncPulseTask {&amp;#10;    constructor(device, line) {&amp;#10;        this.device = device;&amp;#10;        this.line = line;&amp;#10;        this.sync_times = [];&amp;#10;        this.task = new nidaqmx.Task();&amp;#10;        this.task.di_channels.add_di_chan(`${this.device}/${this.line}`, {&quot;line_grouping&quot;: LineGrouping.CHAN_PER_LINE});&amp;#10;    }&amp;#10;    read_pulse() {&amp;#10;        var data, pulse_time;&amp;#10;        data = this.task.read({&quot;number_of_samples_per_channel&quot;: 1, &quot;timeout&quot;: 10.0});&amp;#10;        if (data[0]) {&amp;#10;            pulse_time = time.time();&amp;#10;            this.sync_times.push(pulse_time);&amp;#10;            console.log(`Sync pulse received at ${pulse_time}`);&amp;#10;        }&amp;#10;    }&amp;#10;    start() {&amp;#10;        this.task.start();&amp;#10;    }&amp;#10;    stop() {&amp;#10;        this.task.stop();&amp;#10;        this.task.close();&amp;#10;    }&amp;#10;}&amp;#10;sync_task = new SyncPulseTask(&quot;Dev1&quot;, &quot;port2/line0&quot;);&amp;#10;sync_task.start();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="# Check for sync pulse each frame&amp;#10;sync_task.read_pulse()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="sync_task.read_pulse();&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="# Stop the sync task&amp;#10;sync_task.stop()&amp;#10;&amp;#10;#save&amp;#10;thisExp.addData('sync_times', sync_task.sync_times)" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="sync_task.stop();&amp;#10;psychoJS.experiment.addData(&quot;sync_times&quot;, sync_task.sync_times);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="code_nidaq_sync_pulse_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_read_encoder" plugin="None">
        <Param val="arduino_port = 'COM3'&amp;#10;encoder_radius = 2.75" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="arduino_port = &quot;COM3&quot;;&amp;#10;encoder_radius = 2.75;&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="import serial&amp;#10;import time&amp;#10;&amp;#10;class Encoder:&amp;#10;    def __init__(self, port, baud_rate=9600, radius=2.75, sampling_rate_hz=20):&amp;#10;        self.port = port&amp;#10;        self.baud_rate = baud_rate&amp;#10;        self.radius = radius&amp;#10;        self.sampling_rate_hz = sampling_rate_hz&amp;#10;        self.sampling_interval = 1.0 / sampling_rate_hz&amp;#10;        self.ser = serial.Serial(self.port, self.baud_rate, timeout=1)&amp;#10;        time.sleep(2)  # Wait for the serial connection to initialize&amp;#10;&amp;#10;    def read_data(self):&amp;#10;        if self.ser.in_waiting &gt; 0:&amp;#10;            line = self.ser.readline().decode('utf-8').strip()&amp;#10;            if line:&amp;#10;                try:&amp;#10;                    total_distance = float(line)&amp;#10;                    return total_distance&amp;#10;                except ValueError:&amp;#10;                    return None  # Ignore lines that can't be converted to float&amp;#10;        return None&amp;#10;&amp;#10;    def close(self):&amp;#10;        self.ser.close()&amp;#10;        print(&quot;Serial connection closed.&quot;)&amp;#10;&amp;#10;# Initialize the encoder object&amp;#10;encoder = Encoder(port=arduino_port, baud_rate=9600, radius=encoder_radius, sampling_rate_hz=20)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import * as serial from 'serial';&amp;#10;import * as time from 'time';&amp;#10;class Encoder {&amp;#10;    constructor(port, baud_rate = 9600, radius = 2.75, sampling_rate_hz = 20) {&amp;#10;        this.port = port;&amp;#10;        this.baud_rate = baud_rate;&amp;#10;        this.radius = radius;&amp;#10;        this.sampling_rate_hz = sampling_rate_hz;&amp;#10;        this.sampling_interval = (1.0 / sampling_rate_hz);&amp;#10;        this.ser = new serial.Serial(this.port, this.baud_rate, {&quot;timeout&quot;: 1});&amp;#10;        time.sleep(2);&amp;#10;    }&amp;#10;    read_data() {&amp;#10;        var line, total_distance;&amp;#10;        if ((this.ser.in_waiting &gt; 0)) {&amp;#10;            line = this.ser.readline().decode(&quot;utf-8&quot;).strip();&amp;#10;            if (line) {&amp;#10;                try {&amp;#10;                    total_distance = Number.parseFloat(line);&amp;#10;                    return total_distance;&amp;#10;                } catch(e) {&amp;#10;                    if ((e instanceof ValueError)) {&amp;#10;                        return null;&amp;#10;                    } else {&amp;#10;                        throw e;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        return null;&amp;#10;    }&amp;#10;    close() {&amp;#10;        this.ser.close();&amp;#10;        console.log(&quot;Serial connection closed.&quot;);&amp;#10;    }&amp;#10;}&amp;#10;encoder = new Encoder({&quot;port&quot;: arduino_port, &quot;baud_rate&quot;: 9600, &quot;radius&quot;: encoder_radius, &quot;sampling_rate_hz&quot;: 20});&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="recorded_data = [];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Start recording data&amp;#10;recorded_data = []&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="# Read data during the routine&amp;#10;distance = encoder.read_data()&amp;#10;if distance is not None:&amp;#10;    recorded_data.append(distance)&amp;#10;    print(f&quot;Total Distance: {distance} inches&quot;)&amp;#10;time.sleep(encoder.sampling_interval)&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="distance = encoder.read_data();&amp;#10;if ((distance !== null)) {&amp;#10;    recorded_data.push(distance);&amp;#10;    console.log(`Total Distance: ${distance} inches`);&amp;#10;}&amp;#10;time.sleep(encoder.sampling_interval);&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="# Save data to PsychoPy's data output&amp;#10;thisExp.addData('encoder_data', recorded_data)&amp;#10;&amp;#10;# Close the serial connection&amp;#10;encoder.close()&amp;#10;print(&quot;Data recording complete.&quot;)&amp;#10;" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="psychoJS.experiment.addData(&quot;encoder_data&quot;, recorded_data);&amp;#10;encoder.close();&amp;#10;console.log(&quot;Data recording complete.&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_read_encoder" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="nidaqTrigger">
      <RoutineSettingsComponent name="nidaqTrigger" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="nidaqTrigger" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text_waiting_message" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_waiting_message" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Waiting for NIDAQ trigger to begin visual stim..." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code__nidaq_trigger" plugin="None">
        <Param val="import nidaqmx&amp;#10;from psychopy import core&amp;#10;import time&amp;#10;&amp;#10;nidaq_trigger = False&amp;#10;&amp;#10;# Function to wait for trigger signal&amp;#10;def wait_for_trigger():&amp;#10;    # Define NI-DAQmx task&amp;#10;    with nidaqmx.Task() as task: &amp;#10;        # Configure the task to listen for a digital input signal on a specific port and line&amp;#10;        task.di_channels.add_di_chan(&quot;Dev1/port2/line0&quot;)&amp;#10;    &amp;#10;        print(&quot;Waiting for trigger signal...&quot;)&amp;#10;        while True:&amp;#10;            signal = task.read()&amp;#10;            if signal:  # Assuming the trigger signal is a digital high (True) signal&amp;#10;                print(&quot;Trigger signal received!&quot;)&amp;#10;                nidaq_trigger = False&amp;#10;                break&amp;#10;            core.wait(0.01)  # Small delay to prevent CPU overload&amp;#10;&amp;#10;def trigger_start():&amp;#10;    with nidaqmx.Task() as task:&amp;#10;        task.do_channels.add_do_chan(&quot;Dev1/port2/line0&quot;)&amp;#10;        task.write(True)&amp;#10;        time.sleep(0.1)&amp;#10;        task.write(False)" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#wait_for_trigger()" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="## Check the condition each frame&amp;#10;#with nidaqmx.Task() as nidaq: &amp;#10;#    # Configure the task to listen for a digital input signal on a specific port and line&amp;#10;#    nidaq.di_channels.add_di_chan(&quot;Dev1/port2/line0&quot;)&amp;#10;#    print(&quot;Waiting for trigger signal...&quot;)&amp;#10;#    &amp;#10;#    nidaq_trigger = nidaq.read()&amp;#10;#    &amp;#10;#    if nidaq_trigger:&amp;#10;#        continueRoutine = False  # Ends the routine if the condition is met&amp;#10;#" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="trigger_start();&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="trigger_start()&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code__nidaq_trigger" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_start" plugin="None">
        <Param val="'y','n','left','right','space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_start" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="nidaqSynch">
      <RoutineSettingsComponent name="nidaqSynch" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="nidaqSynch" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_nidaq_sync_pulse" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="from nidaqmx import Task&amp;#10;import numpy as np&amp;#10;import time&amp;#10;&amp;#10;class SyncPulseTask(Task):&amp;#10;    def __init__(self):&amp;#10;        Task.__init__(self)&amp;#10;        self.CreateDIChan(&quot;/Dev1/port0/line0&quot;, &quot;&quot;, PyDAQmx.DAQmx_Val_ChanForAllLines)&amp;#10;        self.AutoRegisterEveryNSamplesEvent()&amp;#10;        self.sync_times = []&amp;#10;&amp;#10;    def EveryNCallback(self):&amp;#10;        pulse_time = time.time()&amp;#10;        self.sync_times.append(pulse_time)&amp;#10;        print(f&quot;Sync pulse received at {pulse_time}&quot;)&amp;#10;        return 0  # The function should return an integer&amp;#10;    &amp;#10;    def Start(self):&amp;#10;        self.StartTask()&amp;#10;&amp;#10;sync_task = SyncPulseTask()&amp;#10;sync_task.Start()" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import {Task} from 'nidaqmx';&amp;#10;import * as np from 'numpy';&amp;#10;import * as time from 'time';&amp;#10;class SyncPulseTask extends Task {&amp;#10;    constructor() {&amp;#10;        Task.__init__(this);&amp;#10;        new this.CreateDIChan(&quot;/Dev1/port0/line0&quot;, &quot;&quot;, PyDAQmx.DAQmx_Val_ChanForAllLines);&amp;#10;        new this.AutoRegisterEveryNSamplesEvent();&amp;#10;        this.sync_times = [];&amp;#10;    }&amp;#10;    EveryNCallback() {&amp;#10;        var pulse_time;&amp;#10;        pulse_time = time.time();&amp;#10;        this.sync_times.push(pulse_time);&amp;#10;        console.log(`Sync pulse received at ${pulse_time}`);&amp;#10;        return 0;&amp;#10;    }&amp;#10;    Start() {&amp;#10;        new this.StartTask();&amp;#10;    }&amp;#10;}&amp;#10;sync_task = new SyncPulseTask();&amp;#10;new sync_task.Start();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="# Check for new sync pulses and update the experiment data if needed&amp;#10;if len(sync_task.sync_times) &gt; 0:&amp;#10;    last_sync_time = sync_task.sync_times[-1]&amp;#10;    print(f&quot;Last sync pulse time: {last_sync_time}&quot;)" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if ((sync_task.sync_times.length &gt; 0)) {&amp;#10;    last_sync_time = sync_task.sync_times.slice((- 1))[0];&amp;#10;    console.log(`Last sync pulse time: ${last_sync_time}`);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="thisExp.addData('sync_times', sync_task.sync_times)" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="psychoJS.experiment.addData(&quot;sync_times&quot;, sync_task.sync_times);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_nidaq_sync_pulse" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="nidaqTrigger"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="10" valType="num"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="display_gratings"/>
    <LoopTerminator name="trials"/>
  </Flow>
</PsychoPy2experiment>
